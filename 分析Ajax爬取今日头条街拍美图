import requests
from urllib.parse import urlencode
import time
import os
from hashlib import md5
from multiprocessing.pool import Pool
import re

def get_page(offset, timestamp):
    params = {
        'aid': '24',
        'app_name': 'web_search',
        'offset': offset,
        'format': 'json',
        'keyword': '街拍',
        'autoload': 'true',
        'count': '20',
        'en_qc': '1',
        'cur_tab': '1',
        'from': 'search_tab',
        'pd': 'synthesis',
        'timestamp': timestamp
    }
    url = 'http://www.toutiao.com/search_content/?' + urlencode(params)
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
    except requests.ConnectionError:
        return None

def get_images(json):
    if json.get('data'):
        for item in json.get('data'):
            title = re.sub('\|', '', str(item.get('title')))
            images = item.get('image_list')
            try:
                for image in images:
                    yield {
                        'image': image.get('url'),
                        'title': title
                    }
            except:
                return None

def save_image(item):
    if not os.path.exists(re.sub('\|', '', str(item.get('title')))):
        os.mkdir(re.sub('\|', '', str(item.get('title'))))
    try:
        response = requests.get('http:' + item.get('image'))
        if response.status_code == 200:
            file_path = '{0}/{1}.{2}'.format(re.sub('\|', '', str(item.get('title'))), md5(response.content).hexdigest(), 'jpg')
            if not os.path.exists(file_path):
                with open(file_path, 'wb') as f:
                    f.write(response.content)
            else:
                print('Already Downloaded', file_path)
    except:
        print('Failed to Save Image')

def main(offset):
    timestamp = int(round(time.time() * 1000))
    json = get_page(offset, timestamp)
    for item in get_images(json):
        print(item)
        save_image(item)

GROUP_START = 0
GROUP_END = 20

if __name__ == '__main__':
    pool = Pool()
    groups = ([x * 20 for x in range(GROUP_START, GROUP_END)])
    pool.map(main, groups)
    pool.close()
    pool.join()
